name: Build ARM64 Debian RootFS

on:
  workflow_dispatch:

jobs:
  build-arm64-rootfs:
    runs-on: ubuntu-latest

    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 20480
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-haskell: 'true'
        remove-android: 'true'
        remove-docker-images: 'true'

    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: true
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true  
          
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y debootstrap qemu-utils qemu-user-static zip img2simg

    - name: Create ARM64 Debian RootFS
      run: |
        CODENAME=$(curl -s https://deb.debian.org/debian/dists/stable/Release | grep -oP 'Codename:\s+\K\w+')

        echo "The Debian codename is: $CODENAME"
        mkdir -p rootfs
        # 创建 ARM64 的 Debian 基础系统
        sudo debootstrap --arch=arm64 --foreign --verbose $CODENAME rootfs http://ftp.us.debian.org/debian/
        sudo cp /usr/bin/qemu-aarch64-static rootfs/usr/bin/
        # 配置 chroot 环境
        sudo mount --bind /proc rootfs/proc
        sudo mount --bind /dev/pts rootfs/dev/pts
        sudo mount --bind /dev rootfs/dev
        sudo mount --bind /sys rootfs/sys
        echo "##############"
        sudo chroot rootfs /debootstrap/debootstrap --second-stage --verbose

    - name: Customize ARM64 RootFS
      run: |
        sudo mount --bind /proc rootfs/proc
        sudo mount --bind /dev/pts rootfs/dev/pts
        sudo mount --bind /dev rootfs/dev
        sudo mount --bind /sys rootfs/sys

        # 自定义配置（通过 chroot 进入 rootfs）
        sudo chroot rootfs /bin/bash -c "
          # 更新包列表
          apt-get update

          echo '# 安装软件包'
          apt-get install -y vim sudo curl openssh-server ssh net-tools ethtool ifupdown iputils-ping  htop vim kmod network-manager make nano fdisk git usbutils initramfs-tools

          echo '# 添加用户 kschen 并设置密码'
          useradd -m -s /bin/bash kschen
          echo 'kschen:password' | chpasswd

          echo '# 将 kschen 添加到 sudo 组'
          usermod -aG sudo kschen

          echo '# 配置 SSH 服务'
          mkdir -p /home/kschen/.ssh
          chmod 700 /home/kschen/.ssh
          touch /home/kschen/.ssh/authorized_keys
          chmod 600 /home/kschen/.ssh/authorized_keys
          chown -R kschen:kschen /home/kschen/.ssh

          echo '# 设置 SSH 服务开机启动'
          systemctl enable ssh

          echo '# 其他配置（如 DNS 和 motd）'
          echo 'nameserver 8.8.8.8' > /etc/resolv.conf
          echo 'Welcome to ARM64 Debian RootFS' > /etc/motd
        "

        # echo '# # 清理并卸载挂载点'
        # df -h
        # sudo umount rootfs/proc
        # sudo umount rootfs/sys
        # sudo umount rootfs/dev/pts
        # sudo umount rootfs/dev
        # df -h

    - name: Create Disk Image
      run: |
        # 创建空白磁盘镜像
        sudo qemu-img create -f raw rootfs.img 2G
        sudo mkfs.ext4 -F rootfs.img

        # 将定制的 rootfs 写入镜像
        sudo mkdir -p /mnt/rootfs
        sudo mount -o loop rootfs.img /mnt/rootfs
        sudo rsync -a rootfs/ /mnt/rootfs
        sudo umount /mnt/rootfs

    - name: Compress rootfs.img
      run: |
       img2simg ./root.img ./rootfs.img
       zip root.zip rootfs.img
  
    - name: Upload image to Release
      uses: ncipollo/release-action@main
      if: steps.compile.outputs.status == 'success' && !cancelled()
      with:
        tag: ARM64_Debian_RootFS
        artifacts: root.zip
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ARM64_Debian_RootFS
